\This is the code behind the car. The code is required twice for all four wheels because you need two Arduinos for all the 
\wheels. 

int trigl=13;               \Defining the trig pin on the Ultrasonic Sensor.
int echol=12;               \Defining the echo pin on the Ultrasonic Sensor.

int enableR= 6;             \Defining all the inputs and enables on the H Bridge.
int input3= 3;
int input4= 5;
int enableL= 11;
int input1= 10;
int input2= 9;


int button=2;               \This is only used if you wanted a button that can reverse the direction of the motor. 
int buttonState=LOW;

long distance;              \long is used for defining a variables that has the value of -2,147,483,648 to 2,147,483,647.
long right;                 \This is setting distance and right to long so that they are equal to any variable between the 2 
                            \numbers above.
void setup(){
  Serial.begin(9600);
  pinMode(enableL, OUTPUT);  \This is setting all the pins on the H Bridge to OUTPUT because they OUTPUT information.
  pinMode(input3, OUTPUT);   \pinMode is a function in C++ used for defining pins as an OUTPUT or INPUT. For example below with
  pinMode(input4, OUTPUT);   \the echo pin from the Ultrasonic Sensor is an example of an INPUT pin as it recieves information
  pinMode(enableR, OUTPUT);  \rather than outputting it. 
  pinMode(input1, OUTPUT);
  pinMode(input2, OUTPUT);

  
  pinMode(trigl,OUTPUT);  \The trig pin is the OUTPUT because the trig pin is the one that outputs the sound.
  pinMode(echol,INPUT);   \The echo pin is the INPUT because the echo pin recieves the sound after it bounces off the object.

}
    long pingl(int trigl, int echol){   \This is creating a pingl function. Used later for controlling the speed of the car.
    digitalWrite(trigl, LOW);           \This is the function that turns the trig pin to low. Delays for 2 microseconds 
    delayMicroseconds(2);               \turns it to high, then delays 10 microseconds then sets the trig back to low.
    digitalWrite(trigl, HIGH); 
    delayMicroseconds(10);
    digitalWrite(trigl,LOW);
    
  
    long duration;                 \long is used for defining a variables that has the value of -2,147,483,648 to 2,147,483,647.
    duration= pulseIn(echol, HIGH);    \Now duration is set to pulseIn(). pulseIn is a function that reads a pin that is either
                                       \High or Low. In this function it waits for the echo pin to go from LOW to HIGH it then 
                                       \starts timing waits for it to go back to LOW and stops timing. 
    long dist;
    dist=duration/29/2;                \This is used to find the distance of the object. 

    return dist;                       \Then finally it returns the value of dist
}

void loop(){
 distance= pingl(trigl,echol);     \This goes back to the function defined in the setup. Using the trigl and echol as the 
                                   \values used in the pingl function.
 distance= map(distance, 0,1024,0,300);  \This is converting the values of the DC Motors into the corresponding value on the 
                                         \Ultrasonic Sensors. So finding the values between 0-1024 that correspond to what value
                                         \from 0-300
 analogWrite(enableL,distance);          \Turning on one motor and controlling the power via the distance fucntion
 analogWrite(enableR, distance);         \Turning on another motor and controlling the power via the distance function again. 
  
   buttonState= digitalRead(button);     \This chunk of code is only used if you wanted to add in a button that could reverse 
  if (!buttonState){                     \The direction of the motors. 
  digitalWrite(input3, HIGH);            \This reads the button state and if its not equal to LOW then input 1 and 3 go HIGH
  digitalWrite(input4,LOW);              \and input 2 and 4 go LOW. So the motor rotates one direction. 
  digitalWrite(input2,LOW);
  digitalWrite(input1,HIGH);
  }else{                                 \Otherwise if the buttonstate is equal to LOW then input 1 and 3 go LOW and input 2 and
  digitalWrite(input3,LOW);              \input 2 and 4 go to HIGH. Therefore the motor rotates in the opposite direction.
  digitalWrite(input4,HIGH);
  digitalWrite(input2,HIGH);
  digitalWrite(input1,LOW);
  }
}

